/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.AdministrativeRole;

import Business.Classroom;
import Business.Group;
import Business.SortByAge;
import Business.SortByGroupID;
import Business.SortByName;
import java.awt.CardLayout;
import javax.swing.JPanel;
import Business.Student;
import Business.StudentList;
import Business.Teacher;
import Business.TeacherList;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Stack;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tnaxy
 */
public class StudentToClassRoomJPanel extends javax.swing.JPanel {
   public StudentList studentlist;
    public JPanel userProcessContainer;
    private TeacherList teacherList;
    /**
     * Creates new form StudentListDirectoryJPanel
     */
    public StudentToClassRoomJPanel(JPanel rightJPanel,StudentList studentlist,TeacherList teacherList) {
        initComponents();
        this.userProcessContainer = rightJPanel;
        this.studentlist = studentlist;
        this.teacherList = teacherList;
        populatable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        StudentListtbl = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnAge = new javax.swing.JButton();
        btnGroup = new javax.swing.JButton();
        btnName = new javax.swing.JButton();

        StudentListtbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student Name", "Age(Month)", "Group Number", "Teacher Name", "Parent Name", "Classromm Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(StudentListtbl);

        jLabel1.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jLabel1.setText("Student Lists");

        jButton1.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnAge.setText("Age");
        btnAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgeActionPerformed(evt);
            }
        });

        btnGroup.setText("Group");
        btnGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGroupActionPerformed(evt);
            }
        });

        btnName.setText("Name");
        btnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnName, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                            .addComponent(btnGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(190, 190, 190)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnAge)
                        .addGap(18, 18, 18)
                        .addComponent(btnName)
                        .addGap(18, 18, 18)
                        .addComponent(btnGroup)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgeActionPerformed
        // TODO add your handling code here:
        SortByAge s = new SortByAge();
        populatable(s);
    }//GEN-LAST:event_btnAgeActionPerformed

    private void btnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNameActionPerformed
        // TODO add your handling code here:
        SortByName s = new SortByName();
        populatable(s);
    }//GEN-LAST:event_btnNameActionPerformed

    private void btnGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGroupActionPerformed
        // TODO add your handling code here:
        SortByGroupID s = new SortByGroupID();
        populatable(s);
    }//GEN-LAST:event_btnGroupActionPerformed

 private int AssignStudnetToTeacher(int ratio,ArrayList<Student>arrayList,int countNO, Stack<Teacher> stack){
        int size =(arrayList.size()%ratio==0)?arrayList.size()/ratio:arrayList.size()/ratio+1;
        for (int i = 0; i < size; i++) {
            Group group = new Group(String.valueOf(countNO),stack.pop());
            for(int j =0;j<ratio;j++){
                if (i*ratio+j<arrayList.size()) {
                group.getGroupDirectory().add(arrayList.get(i*ratio+j));
                arrayList.get(i*ratio+j).setGroupincluing(group);
                }
            }
            countNO++;
        }
        return countNO;
    }
 private void AssignStudentToClassroom(ArrayList<Student> arrayList,ArrayList<Classroom>roomlist, int ratio,int roomcount){
     int size =(arrayList.size()%ratio==0)?arrayList.size()/ratio:arrayList.size()/ratio+1;
     StringBuffer roomBuffer = new StringBuffer("ClassRoom");
     for (int i = 0; i < size; i++) {
           Classroom classroom = new Classroom(roomBuffer.append(roomcount++).toString());
         for(int j =0;classroom.getGroupList().size()<ratio;j++){
          if(!classroom.getGroupList().contains(arrayList.get(j).getGroupincluing()))
              classroom.getGroupList().add(arrayList.get(j).getGroupincluing());
      }
         roomcount++;
         roomlist.add(classroom);
     }
     
 }
    private void populatable(){
        ArrayList <Student> arrayList6_12 = new ArrayList <Student> ();
        ArrayList <Student> arrayList12_24 = new ArrayList <Student> ();
        ArrayList <Student> arrayList24_36 = new ArrayList <Student> ();
        ArrayList <Student>  arrayList36_48 = new ArrayList <Student> ();
        ArrayList <Student>  arrayList48_60 = new ArrayList <Student> ();
        ArrayList <Student>  arrayList60plus = new ArrayList <Student> ();
        ArrayList <Classroom> classroomsDirectory = new ArrayList<Classroom>();
        Stack<Teacher> teacherstack = new Stack<Teacher>();
        for(Teacher t : teacherList.getTeacherList()){
            teacherstack.push(t);
        }
        for(Student s :studentlist.getStudentList()){
            
            if(s.getAge()>=6&&s.getAge()<=12){
                arrayList6_12.add(s);
            }
            if (s.getAge()>12&&s.getAge()<=24) {
                arrayList12_24.add(s);
            }
            if (s.getAge()>24&&s.getAge()<=36) {
                arrayList24_36.add(s);
            }
            if (s.getAge()>36&&s.getAge()<=48) {
                arrayList36_48.add(s);
            }
            if(s.getAge()>48&&s.getAge()<=60){
                arrayList60plus.add(s);
            }
            if(s.getAge()>60){
                arrayList60plus.add(s);
            }
        }
         int countNO =1;
         countNO = AssignStudnetToTeacher(4, arrayList6_12, countNO,teacherstack);
         countNO = AssignStudnetToTeacher(5, arrayList12_24, countNO,teacherstack);
         countNO = AssignStudnetToTeacher(6, arrayList24_36, countNO,teacherstack);
         countNO = AssignStudnetToTeacher(8, arrayList36_48, countNO,teacherstack);
         countNO = AssignStudnetToTeacher(12, arrayList48_60, countNO,teacherstack);
         countNO = AssignStudnetToTeacher(15, arrayList60plus, countNO,teacherstack);
         int roomcount=1;
         AssignStudentToClassroom(arrayList6_12, classroomsDirectory, 3, roomcount);
         AssignStudentToClassroom(arrayList12_24, classroomsDirectory, 3, roomcount);
         AssignStudentToClassroom(arrayList24_36, classroomsDirectory, 3, roomcount);
         AssignStudentToClassroom(arrayList36_48, classroomsDirectory, 3, roomcount);
         AssignStudentToClassroom(arrayList48_60, classroomsDirectory, 2, roomcount);
         AssignStudentToClassroom(arrayList60plus, classroomsDirectory, 2, roomcount);
         SortByGroupID sbgid = new SortByGroupID();
         Collections.sort(studentlist.getStudentList(),sbgid);
         DefaultTableModel dtm =(DefaultTableModel)StudentListtbl.getModel();
         dtm.setRowCount(0);
         SortByAge s = new SortByAge();
         Collections.sort(studentlist.getStudentList(), s);
         for(Student p1:studentlist.getStudentList()){
            Object row[] = new Object[6];
            row[0] = p1;
            row[1] = p1.getAge();
             try {
                 row[2] = p1.getGroupincluing().getGroupID();
             } catch (Exception e) {
                 row[2] = new String("Error");
             }
            row[3] = p1.getGroupincluing().getTeacherincharge().getName();
            row[4] = p1.getParentsName();
            if(p1.getAge()<48)row[5]=Integer.valueOf((p1.getGroupincluing().getGroupID()))/3+1;
           else row[5] =(Integer.valueOf((p1.getGroupincluing().getGroupID()))-27)/2+11;
            dtm.addRow(row);
 }
   
    }
    private void populatable(Comparator<Student> sComparator){
        ArrayList <Student> arrayList6_12 = new ArrayList <Student> ();
        ArrayList <Student> arrayList12_24 = new ArrayList <Student> ();
        ArrayList <Student> arrayList24_36 = new ArrayList <Student> ();
        ArrayList <Student>  arrayList36_48 = new ArrayList <Student> ();
        ArrayList <Student>  arrayList48_60 = new ArrayList <Student> ();
        ArrayList <Student>  arrayList60plus = new ArrayList <Student> ();
        ArrayList <Classroom> classroomsDirectory = new ArrayList<Classroom>();
        Stack<Teacher> teacherstack = new Stack<Teacher>();
        for(Teacher t : teacherList.getTeacherList()){
            teacherstack.push(t);
        }
        for(Student s :studentlist.getStudentList()){
            
            if(s.getAge()>=6&&s.getAge()<=12){
                arrayList6_12.add(s);
            }
            if (s.getAge()>12&&s.getAge()<=24) {
                arrayList12_24.add(s);
            }
            if (s.getAge()>24&&s.getAge()<=36) {
                arrayList24_36.add(s);
            }
            if (s.getAge()>36&&s.getAge()<=48) {
                arrayList36_48.add(s);
            }
            if(s.getAge()>48&&s.getAge()<=60){
                arrayList60plus.add(s);
            }
            if(s.getAge()>60){
                arrayList60plus.add(s);
            }
        }
         int countNO =1;
         countNO = AssignStudnetToTeacher(4, arrayList6_12, countNO,teacherstack);
         countNO = AssignStudnetToTeacher(5, arrayList12_24, countNO,teacherstack);
         countNO = AssignStudnetToTeacher(6, arrayList24_36, countNO,teacherstack);
         countNO = AssignStudnetToTeacher(8, arrayList36_48, countNO,teacherstack);
         countNO = AssignStudnetToTeacher(12, arrayList48_60, countNO,teacherstack);
         countNO = AssignStudnetToTeacher(15, arrayList60plus, countNO,teacherstack);
         int roomcount=1;
         AssignStudentToClassroom(arrayList6_12, classroomsDirectory, 3, roomcount);
         AssignStudentToClassroom(arrayList12_24, classroomsDirectory, 3, roomcount);
         AssignStudentToClassroom(arrayList24_36, classroomsDirectory, 3, roomcount);
         AssignStudentToClassroom(arrayList36_48, classroomsDirectory, 3, roomcount);
         AssignStudentToClassroom(arrayList48_60, classroomsDirectory, 2, roomcount);
         AssignStudentToClassroom(arrayList60plus, classroomsDirectory, 2, roomcount);
         
         Collections.sort(studentlist.getStudentList(),sComparator);
         DefaultTableModel dtm =(DefaultTableModel)StudentListtbl.getModel();
         dtm.setRowCount(0);
         SortByAge s = new SortByAge();
         Collections.sort(studentlist.getStudentList(), s);
         for(Student p1:studentlist.getStudentList()){
            Object row[] = new Object[6];
            row[0] = p1;
            row[1] = p1.getAge();
             try {
                 row[2] = p1.getGroupincluing().getGroupID();
             } catch (Exception e) {
                 row[2] = new String("Error");
             }
            row[3] = p1.getGroupincluing().getTeacherincharge().getName();
            row[4] = p1.getParentsName();
            if(p1.getAge()<48)row[5]=Integer.valueOf((p1.getGroupincluing().getGroupID()))/3+1;
           else row[5] =(Integer.valueOf((p1.getGroupincluing().getGroupID()))-27)/2+11;
            dtm.addRow(row);
 }
   
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable StudentListtbl;
    private javax.swing.JButton btnAge;
    private javax.swing.JButton btnGroup;
    private javax.swing.JButton btnName;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
