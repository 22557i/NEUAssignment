/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.CustomerRole;

import Business.EcoSystem;
import Business.Enterprise.CargoDeliveryCompany.CargoDelivery;
import Business.Enterprise.CargoDeliveryCompany.Service;
import Business.Enterprise.PickupServiceCompany.PickupService;
import Business.Enterprise.ShopModel;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.CustomerAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Hui Huang
 */
public class ChooseCompanyJPanel extends javax.swing.JPanel {
    
        private EcoSystem system;
        private JPanel container;
        private CustomerAccount account;
        private Network network;
        private ShopModel.ShopType type;
        private JFrame frame;
        private Organization organizaiton; 
        private boolean pivot;

    /**
     * Creates new form DrivingServiceJPanel
     */
    public ChooseCompanyJPanel(EcoSystem system, String netname, JPanel container, CustomerAccount account, ShopModel.ShopType type, JFrame frame) {
        initComponents();
        this.system = system;
        this.container = container;
        this.account = account;
       
            for(Network nw : system.getNetworkList()){
                 if(nw.getCity().contains(netname))
                     network = nw;
            }
        this.type = type;
        this.frame = frame;
        SetUpNetwork(network);
        
        populateTableCompany();
    }
    
    private void populateTableCompany() {
        DefaultTableModel dtm = (DefaultTableModel) tableCompany.getModel();
        dtm.setRowCount(0);
        if (type.equals(ShopModel.ShopType.CargoDelivery)) {
            for (CargoDelivery res : network.getCargodeliveryList()) {
                Object row[] = new Object[2];
                row[0] = res; //name
                row[1] = res.getOverallScore(); //overall score
                dtm.addRow(row);
                pivot = true;
            }
        }
        if (type.equals(ShopModel.ShopType.PickupService)) {
            for (PickupService pickupAgency : network.getPickupServicesList()) {
                Object row[] = new Object[2];
                row[0] = pickupAgency; //name
               // row[1] = pickupAgency.getOverallScore(); //overall score
                dtm.addRow(row);
                pivot = false;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCompany = new javax.swing.JTable();
        detailPanel = new javax.swing.JPanel();

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        tableCompany.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Overall Score"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCompany.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCompanyMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableCompany);

        detailPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addComponent(detailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(47, 47, 47))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(466, 466, 466))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(btnBack)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(detailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_btnBackActionPerformed

    private void tableCompanyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCompanyMouseClicked
        // TODO add your handling code here:
        int index = tableCompany.getSelectedRow();
        TableModel model = tableCompany.getModel();

         if (index >= 0) {
            if (type.equals(ShopModel.ShopType.CargoDelivery)) {
                CargoDelivery cargoAgency = (CargoDelivery) model.getValueAt(index, 0);
                CompanyDetailsJPanel panel = new CompanyDetailsJPanel(this.system, new CargoDelivery("CargoDelivery", "11", "1231"), this.account, network, type);
                detailPanel.remove(this);
                detailPanel.add(panel);
            }
            if (type.equals(ShopModel.ShopType.PickupService)) {
                PickupService pickupAgency = (PickupService) model.getValueAt(index, 0);
                CompanyDetailsJPanel panel = new CompanyDetailsJPanel(this.system, new PickupService("PickUpService", "22", "232323"), this.account, network, type);
                detailPanel.remove(this);
                detailPanel.add(panel);
            }

            CardLayout layout = (CardLayout) this.detailPanel.getLayout();
            layout.next(detailPanel);
        }
    }//GEN-LAST:event_tableCompanyMouseClicked

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
         int row = tableCompany.getSelectedRow();

        if(row<0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(pivot){
            CargoDelivery organization = (CargoDelivery)tableCompany.getValueAt(row, 0);
            CardLayout layout = (CardLayout) this.container.getLayout();
            OrderDetailJPanel odjp = new OrderDetailJPanel(system, container, (CargoDelivery) organizaiton, type, this.account, frame);
            this.container.add(odjp);
        layout.next(this.container);
        }else{
            PickupService organization = (PickupService)tableCompany.getValueAt(row, 0);
            CardLayout layout = (CardLayout) this.container.getLayout();
            OrderDetailJPanel odjp = new OrderDetailJPanel(system, container, (PickupService) organizaiton, type, this.account, frame);
            this.container.add(odjp);
        }
      
        
       
    }//GEN-LAST:event_btnNextActionPerformed

    public void SetUpNetwork(Network network){
      network.setCargodeliveryList(new ArrayList<CargoDelivery>());
      network.setPickupServicesList(new ArrayList<PickupService>());
      if(network.getCity().toLowerCase().contains("boston")){
          CargoDelivery enter1 = network.createCargoDelivery("Boston Cargo Agency", "1 Pleasant Street, Boston, MA 02125", "(617) 553-5900");
          enter1.setDescription("This is a CarGo Agency.");
        enter1.setId("Cargo");
        enter1.setPath("Images/DeliveryCompanyCut/default.png");//没用
        Service service1 = new Service(enter1, "9' cargo van", 10.00);
        Service service2 = new Service(enter1, "10' truck", 20.00);
        Service service3 = new Service(enter1, "15' truck", 30.00);
        enter1.addDashToMenu(service1);
        enter1.addDashToMenu(service2);
        enter1.addDashToMenu(service3);
      }
      if(network.getCity().toLowerCase().contains("los")){
          
      }
      if(network.getCity().toLowerCase().contains("new")){
          
      }
      
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnNext;
    private javax.swing.JPanel detailPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableCompany;
    // End of variables declaration//GEN-END:variables
}
